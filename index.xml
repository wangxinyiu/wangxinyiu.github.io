<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xinyi Wang</title>
    <link>https://wangxinyiu.github.io/</link>
    <description>Recent content on Xinyi Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 Feb 2024 00:04:32 -0800</lastBuildDate>
    <atom:link href="https://wangxinyiu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Session-based VS Token-based Authentication</title>
      <link>https://wangxinyiu.github.io/posts/tokensession/</link>
      <pubDate>Fri, 16 Feb 2024 00:04:32 -0800</pubDate>
      <guid>https://wangxinyiu.github.io/posts/tokensession/</guid>
      <description>Session-based Authentication:&#xA;在基于会话的认证中，当用户登录时，服务器会创建一个会话，并将会话ID存储在服务器上。 用户的浏览器会保存这个会话ID（通常在cookie中），并在随后的每个请求中发送回服务器。 服务器通过会话ID来识别用户并验证请求的合法性。 Token-based Authentication:&#xA;而在基于令牌的认证系统中，当用户登录成功后，服务器会生成一个令牌（通常是JWT），并将其发送给用户。 用户的设备存储该令牌，并在发起请求时将它作为认证头部信息发送回服务器。 服务器解码令牌以验证用户的身份，而不是检查存储在服务器上的会话。 对比要点:&#xA;存储位置: 会话ID通常存储在服务器上，而令牌通常由客户端保存。 状态: 基于会话的认证是有状态的，需要在服务器上维护会话状态；基于令牌的认证是无状态的，服务器不需要保存用户状态，令牌自包含了所有需要的信息。 可扩展性: 由于基于令牌的认证不需要服务器存储状态，它通常被认为在分布式系统中更具可扩展性。 跨域认证: 令牌更适合于现代的Web应用架构，特别是在处理跨域请求和移动设备认证时。 安全性: 令牌可以加密并包含复杂的授权信息，而会话ID通常较短并且需要依赖安全的传输机制（如HTTPS）来防止被拦截。 这些差异意味着在现代Web和移动应用程序中，基于Token的认证（特别是JWT）越来越受到开发者的青睐，尽管在某些场景中，基于会话的认证仍然是一个有效的选择。</description>
    </item>
    <item>
      <title>Data Storage Tec</title>
      <link>https://wangxinyiu.github.io/posts/datastoragetec/</link>
      <pubDate>Wed, 14 Feb 2024 11:22:06 -0800</pubDate>
      <guid>https://wangxinyiu.github.io/posts/datastoragetec/</guid>
      <description>Technology Advantages Disadvantages Use Cases SQL Databases (e.g., MySQL, PostgreSQL) Structured data, ACID transactions, Complex queries Limited scalability, Schema rigidity Transactional data, Traditional applications (如金融服务) NoSQL Databases (e.g., MongoDB, Cassandra) Scalability, Flexible schema, High performance for unstructured data Less support for ACID transactions, Complexity in data consistency Big Data applications, Content Management, Real-time analytics In-Memory Data Stores (e.g., Redis) High performance, Data volatility, Supports complex data types Data size limited by memory, Persistence complexity Caching, Session storage, Real-time analytics Search Engines (e.</description>
    </item>
    <item>
      <title>System Design</title>
      <link>https://wangxinyiu.github.io/posts/systemdesign/</link>
      <pubDate>Sun, 11 Feb 2024 16:25:07 -0800</pubDate>
      <guid>https://wangxinyiu.github.io/posts/systemdesign/</guid>
      <description>缓解API流量限制的系统设计方案 数据库ID设计选项比较：UUID vs Serial Number 设计基于Elasticsearch的分布式日志关键词搜索系统 设计TikTok视频观看历史记录系统 设计搜索自动补全功能 缓解API流量限制的系统设计方案 问题: 设计一个API A(100M QPS)，已知这个A会call另一个API B，但是B有traffic限制只能Handle 10M QPS，该怎么办？(如何设计一个系统，使得一个高流量的API A（100M QPS）能够有效地调用另一个流量受限的API B（10M QPS），而不违反B的流量限制？)&#xA;在设计这样一个系统时，关键是要在API A和API B之间引入一层流量控制机制。以下是一些可能的解决方案：&#xA;Rate Limiting: 在API A端实施速率限制，以确保对API B的调用不会超过10M QPS。这可以通过令牌桶或漏桶算法来实现。 令牌桶：令牌桶算法允许一定程度的突发流量，因为如果桶内有令牌，请求就可以立即得到处理。这模拟了短时间内高流量的情况。 漏桶：漏桶算法则以恒定的速率允许请求通过，平滑了流量的峰值。&#xA;Caching: 对API B的响应进行缓存(cache)，尤其是对于那些不经常变更的数据。这样，API A可以先查询缓存，只有在缓存未命中的情况下才调用API B。 缓存的大小应该根据可用资源和数据的访问模式来确定。理想情况下，大小应足够存储最常访问的数据集。 设置缓存通常涉及选择一个适当的缓存策略，如LRU（最近最少使用）或TTL（生存时间）来决定何时淘汰数据。&#xA;Batch Processing: 如果API B的调用可以批量处理，那么API A可以收集多个请求并批量发送给API B，以减少调用的频率。 一次性批处理的数量可以基于API B的处理能力和响应时间来决定，同时还需要考虑API A的请求特性。 统计可以通过日志记录或者使用度量工具实时监控每个批次的大小和处理效率。&#xA;Microservice Architecture: 将API A分解为多个微服务，每个服务独立调用API B，并且每个服务都有自己的流量限制控制。 Asynchronous Processing: 通过队列和后台工作进程来异步处理对API B的调用。API A可以将请求放入队列中，并由后台服务以控制的速度处理这些请求。 这个具体会用到什么服务 可以用到什么平台呢？ 异步处理可以利用如RabbitMQ、Kafka或AWS SQS这样的消息队列服务。 平台选择可以是任何能够提供必要可靠性和可扩展性的云服务平台，如AWS、Azure或Google Cloud。&#xA;Failover Strategy：当达到流量上限时，实施备用策略。例如，如果API B不可用，API A可以返回一个缓存的响应或一个错误代码，提醒用户稍后重试。 Load Balancing：如果可能的话，可以使用多个API B实例，每个实例都有自己的流量限制，然后在它们之间进行负载均衡。 我的实例可以架在哪里呢？有没有形象的例子 实例可以部署在云服务提供商提供的虚拟机或容器服务中，如AWS EC2或EKS。 形象的例子是Netflix的微服务架构，它使用Amazon AWS上的多个服务实例来处理巨大的流量。</description>
    </item>
    <item>
      <title>Hadoop</title>
      <link>https://wangxinyiu.github.io/posts/hadoop/</link>
      <pubDate>Tue, 06 Feb 2024 14:51:57 -0800</pubDate>
      <guid>https://wangxinyiu.github.io/posts/hadoop/</guid>
      <description> Hadoop概述 Hadoop组成 HDFS YARN MapReduce HDFS、YARN、MapReduce三者关系 大数据技术生态体系 Hadoop概述 Hadoop核心组件 Hadoop HDFS（分布式文件存储系统）：解决海量数据存储 Hadoop YARN（集群资源管理和任务调度框架）：解决资源任务调度 Hadoop MapReduce（分布式计算框架）：解决海量数据计算 (广义上Hadoop是指围绕Hadoop的大数据生态圈) Hadoop组成 HDFS NameNode(nn) -&amp;gt; 数据都存储在什么位置: 存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个问价你的块列表和块所在的DataNode等 DataNode(dn) -&amp;gt; 具体存储数据: 在本地文件系统存储文件块数据，以及块数据的校验和 Secondary NameNode(2nn) -&amp;gt; 秘书: 每隔一段时间对NameNode元数据备份 YARN MapReduce MapReduce将计算过程分为俩个阶段：Map 和 Reduce&#xA;Map阶段并行处理输入数据 Reduce阶段对Map结果进行汇总 HDFS、YARN、MapReduce三者关系 大数据技术生态体系 </description>
    </item>
    <item>
      <title>A Server Migration to AWS (Internship at Amazon)</title>
      <link>https://wangxinyiu.github.io/projects/amazonintern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/projects/amazonintern/</guid>
      <description>Trasanction Stroage &amp;amp; Config Team&#xA;Introdunction What I did Motivation Result High-level Design Challengest Details decouple的好处 Step function的好处 Why Stepfunction rather than EC2? Why do I plan to use AWS CDK instead of CloudFormation? How do I make sure the code quality? Introdunction Achieve the workflow(BatchMoveEndpoint) in AWS and demonstrate the server(SableManagementServer) can be implemented in Native AWS.&#xA;PDF: [Proof of Conceop] SableManagementServer BatchMoveEndpoints in NAWS: Design Doc&#xA;What I did Migrated the BatchMoveEndpoint (BME) workflow to AWS, ensuring full implementation of SableManagementServer (SMS) within the native AWS environment, which reduced 128 maintenance tickets annually.</description>
    </item>
    <item>
      <title>A travel planning app based on Google Maps and TripAdvisor</title>
      <link>https://wangxinyiu.github.io/projects/bsmartrip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/projects/bsmartrip/</guid>
      <description>Presentation Slides Link&#xA;Catalogs&#xA;Introdunction STAR1 -&amp;gt; Rapid API Star2 -&amp;gt; Priority classfication Details 后端开发文档 RestAPI ER diagram Flow Chart Design Picture Introdunction 在我的前一段工作中，我担任后端API开发的关键角色，负责实现和维护应用程序的核心后端功能。这包括但不限于用户注册、认证以及数据检索和管理等多个方面。&#xA;在用户注册方面，我主要负责使用Spring Security框架来实现基于Token的安全系统。通过这个框架，我创建了一个自定义的认证流程，它能够在用户注册时生成一个安全的Token，并在用户登录时进行验证。这个Token是通过安全算法加密的，并且每次请求都需要携带它来确保用户身份的合法性。使用Spring Security使得整个认证过程不仅安全，而且可维护性和扩展性也非常好，为应用提供了坚固的安全基础。&#xA;我还负责集成了第三方API，如RapidAPI中的Travel Advisor，为规划合理路线功能提供数据支持。这项工作不仅需要理解外部API的工作原理，还需要处理数据同步和异常管理，以确保用户能够获取到准确和及时的旅行建议。&#xA;至于数据的搜索和下载功能，我使用了elastic search去构建，其可以允许用户根据多个维度进行筛选，使得数据检索既高效又精确。&#xA;在这一过程中，我与前端团队紧密合作，确保了API设计的前后端一致性，以及响应性能的优化。通过不断的沟通和迭代，我们共同提升了整个应用程序的稳定性和用户体验。&#xA;这些工作的成果不仅体现在直接的用户反馈上，也在于后端服务的稳定性和可扩展性方面。我为能够支持团队并助力前端功能的实现和业务需求的扩展而感到自豪。&#xA;STAR1 -&amp;gt; Rapid API 情境 (Situation) 在开发一个需要大量旅游信息的项目初期，我们计划使用TripAdvisor的API来获取数据。这个API的成本是平均每个月$350，但它的rate limit是每小时1000次请求，这对于我们的需求来说既昂贵又效率低下。&#xA;任务 (Task) 鉴于成本和效率的双重挑战，我的任务是找到一个更经济高效的解决方案，以支持我们的项目需求，同时不牺牲所需的数据质量和访问频率。&#xA;行动 (Action) 为了解决这个问题，我开始寻找替代的API服务。通过广泛的市场调研，我在Rapid API平台上找到了一个名为&amp;quot;Travel Advisor&amp;quot;的API。它提供了更符合我们预算和性能需求的服务条件：免费支持每月500次请求，同时其rate limit为每秒5次请求。我对比了两个API提供的服务内容、数据质量和使用条款，确保&amp;quot;Travel Advisor&amp;quot;能满足我们的项目需求。&#xA;结果 (Result) 选择&amp;quot;Travel Advisor&amp;quot;API后，我们的团队在接下来的三个月内节省了$1050的成本，同时获得了更高效的数据访问能力。这个决策不仅优化了我们的项目预算，还提高了开发效率，确保项目能够在资源有限的情况下顺利进行。&#xA;通过这个经历，我学会了如何有效地评估技术解决方案的成本效益，并且能够灵活调整计划以适应项目需求和预算限制。这个经验也强化了我的研究能力和决策制定能力。&#xA;Star2 -&amp;gt; Priority classfication Situation: I used to lead a team to finish a full-stack web development within one month.</description>
    </item>
    <item>
      <title>Cat and Dog Recognition Based on CNN Convolutional Neural Network</title>
      <link>https://wangxinyiu.github.io/projects/catdogrecognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/projects/catdogrecognition/</guid>
      <description>Here is PDF: Cat and Dog Recognition Based on CNN Convolutional Neural Network</description>
    </item>
    <item>
      <title>Manual implementation of data structures</title>
      <link>https://wangxinyiu.github.io/posts/implementdatastructure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/posts/implementdatastructure/</guid>
      <description>Implementation of Stack Using Linked List Using Array Implementation of Queue Using Linked List Using Array Implementation of Stack Using Linked List Should we use Linked List or Double-Linked List? class ListNode { int value; ListNode next; // ListNode prev; public ListNode (int value) { this.value = value; } } public class Stack { // push, pop, peek // 必须有一个head private ListNode head; private int size; // constructor -&amp;gt; 最好是把 initialization 写到 constructor 里面。 public Stack () { head = null; size = 0; } // 返回值是boolean 因为 如果超过size 需要返回false // 但是是有 public boolean push (int value) { // I assume the linked list won&amp;#39;t be full.</description>
    </item>
    <item>
      <title>PapyrusAI - An tool for use in higher education courses</title>
      <link>https://wangxinyiu.github.io/projects/papyrusai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/projects/papyrusai/</guid>
      <description>About PapyrusAI was developed by the Digital Learning Lab at the University of California, Irvine, in partnership with the Samueli School of Engineering, as part of an NSF grant (#23152984).&#xA;While our initial goal is to develop this tool for use in higher education courses, we received a Proof of Product grant from UCI’s Beall Applied Innovation Center to adapt the tool for secondary school and determine the marketability and feasibility of commercializing PapyrusAI.</description>
    </item>
    <item>
      <title>StayBooking - An online stay rental application</title>
      <link>https://wangxinyiu.github.io/projects/staybooking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/projects/staybooking/</guid>
      <description>What I did Backend Structure Data Model Compelete Code Challenge Elastic Search(Star) elastic search 实现步骤简述 用Google cloud storage（GCS）存储照片等流媒体 为什么elastic search的全局搜索能力这么强呢？ Potential areas of improvement What I did Deomo: https://recordit.co/cXdWcj0ahV&#xA;Designed and built a single-page web application using React. Bootstrap the development with mature component library Ant Design. Implemented the backend services based on Spring Boot to support stay upload, delete, search, and reserve functionality. Used MySQL to store user-generated data, e.</description>
    </item>
  </channel>
</rss>
