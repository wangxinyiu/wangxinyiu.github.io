<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xinyi Wang</title>
    <link>https://wangxinyiu.github.io/</link>
    <description>Recent content on Xinyi Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 14 Feb 2024 11:22:06 -0800</lastBuildDate>
    <atom:link href="https://wangxinyiu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Storage Tec</title>
      <link>https://wangxinyiu.github.io/posts/datastoragetec/</link>
      <pubDate>Wed, 14 Feb 2024 11:22:06 -0800</pubDate>
      <guid>https://wangxinyiu.github.io/posts/datastoragetec/</guid>
      <description>Technology Advantages Disadvantages Use Cases SQL Databases (e.g., MySQL, PostgreSQL) Structured data, ACID transactions, Complex queries Limited scalability, Schema rigidity Transactional data, Traditional applications (如金融服务) NoSQL Databases (e.g., MongoDB, Cassandra) Scalability, Flexible schema, High performance for unstructured data Less support for ACID transactions, Complexity in data consistency Big Data applications, Content Management, Real-time analytics In-Memory Data Stores (e.g., Redis) High performance, Data volatility, Supports complex data types Data size limited by memory, Persistence complexity Caching, Session storage, Real-time analytics Search Engines (e.</description>
    </item>
    <item>
      <title>Hadoop</title>
      <link>https://wangxinyiu.github.io/posts/hadoop/</link>
      <pubDate>Tue, 06 Feb 2024 14:51:57 -0800</pubDate>
      <guid>https://wangxinyiu.github.io/posts/hadoop/</guid>
      <description> Hadoop概述 Hadoop组成 HDFS YARN MapReduce HDFS、YARN、MapReduce三者关系 大数据技术生态体系 Hadoop概述 Hadoop核心组件 Hadoop HDFS（分布式文件存储系统）：解决海量数据存储 Hadoop YARN（集群资源管理和任务调度框架）：解决资源任务调度 Hadoop MapReduce（分布式计算框架）：解决海量数据计算 (广义上Hadoop是指围绕Hadoop的大数据生态圈) Hadoop组成 HDFS NameNode(nn) -&amp;gt; 数据都存储在什么位置: 存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个问价你的块列表和块所在的DataNode等 DataNode(dn) -&amp;gt; 具体存储数据: 在本地文件系统存储文件块数据，以及块数据的校验和 Secondary NameNode(2nn) -&amp;gt; 秘书: 每隔一段时间对NameNode元数据备份 YARN MapReduce MapReduce将计算过程分为俩个阶段：Map 和 Reduce&#xA;Map阶段并行处理输入数据 Reduce阶段对Map结果进行汇总 HDFS、YARN、MapReduce三者关系 大数据技术生态体系 </description>
    </item>
    <item>
      <title>A Server Migration to AWS (Internship at Amazon)</title>
      <link>https://wangxinyiu.github.io/projects/amazonintern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/projects/amazonintern/</guid>
      <description>Trasanction Stroage &amp;amp; Config Team&#xA;Introdunction What I did Motivation Result High-level Design Details Why Stepfunction rather than EC2? Why do I plan to use AWS CDK instead of CloudFormation? How do I make sure the code quality? Introdunction Achieve the workflow(BatchMoveEndpoint) in AWS and demonstrate the server(SableManagementServer) can be implemented in Native AWS.&#xA;PDF: [Proof of Conceop] SableManagementServer BatchMoveEndpoints in NAWS: Design Doc&#xA;What I did Migrated the BatchMoveEndpoint (BME) workflow to AWS, ensuring full implementation of SableManagementServer (SMS) within the native AWS environment, which reduced 128 maintenance tickets annually.</description>
    </item>
    <item>
      <title>Cat and Dog Recognition Based on CNN Convolutional Neural Network</title>
      <link>https://wangxinyiu.github.io/projects/catdogrecognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/projects/catdogrecognition/</guid>
      <description>Here is PDF: Cat and Dog Recognition Based on CNN Convolutional Neural Network</description>
    </item>
    <item>
      <title>Manual implementation of data structures</title>
      <link>https://wangxinyiu.github.io/posts/implementdatastructure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/posts/implementdatastructure/</guid>
      <description>Implementation of Stack Using Linked List Using Array Implementation of Queue Using Linked List Using Array Implementation of Stack Using Linked List Should we use Linked List or Double-Linked List? class ListNode { int value; ListNode next; // ListNode prev; public ListNode (int value) { this.value = value; } } public class Stack { // push, pop, peek // 必须有一个head private ListNode head; private int size; // constructor -&amp;gt; 最好是把 initialization 写到 constructor 里面。 public Stack () { head = null; size = 0; } // 返回值是boolean 因为 如果超过size 需要返回false // 但是是有 public boolean push (int value) { // I assume the linked list won&amp;#39;t be full.</description>
    </item>
    <item>
      <title>PapyrusAI - An tool for use in higher education courses</title>
      <link>https://wangxinyiu.github.io/projects/papyrusai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/projects/papyrusai/</guid>
      <description>About PapyrusAI was developed by the Digital Learning Lab at the University of California, Irvine, in partnership with the Samueli School of Engineering, as part of an NSF grant (#23152984).&#xA;While our initial goal is to develop this tool for use in higher education courses, we received a Proof of Product grant from UCI’s Beall Applied Innovation Center to adapt the tool for secondary school and determine the marketability and feasibility of commercializing PapyrusAI.</description>
    </item>
    <item>
      <title>StayBooking - An online stay rental application</title>
      <link>https://wangxinyiu.github.io/projects/staybooking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/projects/staybooking/</guid>
      <description>What I did Backend Structure Data Model Compelete Code Challenge Elastic Search(Star) elastic search 实现步骤简述 用Google cloud storage（GCS）存储照片等流媒体 为什么elastic search的全局搜索能力这么强呢？ What I did Deomo: https://recordit.co/cXdWcj0ahV&#xA;Designed and built a single-page web application using React. Bootstrap the development with mature component library Ant Design. Implemented the backend services based on Spring Boot to support stay upload, delete, search, and reserve functionality. Used MySQL to store user-generated data, e.g. stay information and reservation history, and utilized Google Cloud Storage to store media files for uploaded stays.</description>
    </item>
  </channel>
</rss>
