<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Xinyi Wang</title>
    <link>https://wangxinyiu.github.io/posts/</link>
    <description>Recent content in Posts on Xinyi Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 Feb 2024 00:04:32 -0800</lastBuildDate>
    <atom:link href="https://wangxinyiu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Session-based VS Token-based Authentication</title>
      <link>https://wangxinyiu.github.io/posts/tokensession/</link>
      <pubDate>Fri, 16 Feb 2024 00:04:32 -0800</pubDate>
      <guid>https://wangxinyiu.github.io/posts/tokensession/</guid>
      <description>Session-based Authentication:&#xA;在基于会话的认证中，当用户登录时，服务器会创建一个会话，并将会话ID存储在服务器上。 用户的浏览器会保存这个会话ID（通常在cookie中），并在随后的每个请求中发送回服务器。 服务器通过会话ID来识别用户并验证请求的合法性。 Token-based Authentication:&#xA;而在基于令牌的认证系统中，当用户登录成功后，服务器会生成一个令牌（通常是JWT），并将其发送给用户。 用户的设备存储该令牌，并在发起请求时将它作为认证头部信息发送回服务器。 服务器解码令牌以验证用户的身份，而不是检查存储在服务器上的会话。 对比要点:&#xA;存储位置: 会话ID通常存储在服务器上，而令牌通常由客户端保存。 状态: 基于会话的认证是有状态的，需要在服务器上维护会话状态；基于令牌的认证是无状态的，服务器不需要保存用户状态，令牌自包含了所有需要的信息。 可扩展性: 由于基于令牌的认证不需要服务器存储状态，它通常被认为在分布式系统中更具可扩展性。 跨域认证: 令牌更适合于现代的Web应用架构，特别是在处理跨域请求和移动设备认证时。 安全性: 令牌可以加密并包含复杂的授权信息，而会话ID通常较短并且需要依赖安全的传输机制（如HTTPS）来防止被拦截。 这些差异意味着在现代Web和移动应用程序中，基于Token的认证（特别是JWT）越来越受到开发者的青睐，尽管在某些场景中，基于会话的认证仍然是一个有效的选择。</description>
    </item>
    <item>
      <title>Data Storage Tec</title>
      <link>https://wangxinyiu.github.io/posts/datastoragetec/</link>
      <pubDate>Wed, 14 Feb 2024 11:22:06 -0800</pubDate>
      <guid>https://wangxinyiu.github.io/posts/datastoragetec/</guid>
      <description>Technology Advantages Disadvantages Use Cases SQL Databases (e.g., MySQL, PostgreSQL) Structured data, ACID transactions, Complex queries Limited scalability, Schema rigidity Transactional data, Traditional applications (如金融服务) NoSQL Databases (e.g., MongoDB, Cassandra) Scalability, Flexible schema, High performance for unstructured data Less support for ACID transactions, Complexity in data consistency Big Data applications, Content Management, Real-time analytics In-Memory Data Stores (e.g., Redis) High performance, Data volatility, Supports complex data types Data size limited by memory, Persistence complexity Caching, Session storage, Real-time analytics Search Engines (e.</description>
    </item>
    <item>
      <title>System Design</title>
      <link>https://wangxinyiu.github.io/posts/systemdesign/</link>
      <pubDate>Sun, 11 Feb 2024 16:25:07 -0800</pubDate>
      <guid>https://wangxinyiu.github.io/posts/systemdesign/</guid>
      <description>缓解API流量限制的系统设计方案 数据库ID设计选项比较：UUID vs Serial Number 设计基于Elasticsearch的分布式日志关键词搜索系统 设计TikTok视频观看历史记录系统 设计搜索自动补全功能 缓解API流量限制的系统设计方案 问题: 设计一个API A(100M QPS)，已知这个A会call另一个API B，但是B有traffic限制只能Handle 10M QPS，该怎么办？(如何设计一个系统，使得一个高流量的API A（100M QPS）能够有效地调用另一个流量受限的API B（10M QPS），而不违反B的流量限制？)&#xA;在设计这样一个系统时，关键是要在API A和API B之间引入一层流量控制机制。以下是一些可能的解决方案：&#xA;Rate Limiting: 在API A端实施速率限制，以确保对API B的调用不会超过10M QPS。这可以通过令牌桶或漏桶算法来实现。 令牌桶：令牌桶算法允许一定程度的突发流量，因为如果桶内有令牌，请求就可以立即得到处理。这模拟了短时间内高流量的情况。 漏桶：漏桶算法则以恒定的速率允许请求通过，平滑了流量的峰值。&#xA;Caching: 对API B的响应进行缓存(cache)，尤其是对于那些不经常变更的数据。这样，API A可以先查询缓存，只有在缓存未命中的情况下才调用API B。 缓存的大小应该根据可用资源和数据的访问模式来确定。理想情况下，大小应足够存储最常访问的数据集。 设置缓存通常涉及选择一个适当的缓存策略，如LRU（最近最少使用）或TTL（生存时间）来决定何时淘汰数据。&#xA;Batch Processing: 如果API B的调用可以批量处理，那么API A可以收集多个请求并批量发送给API B，以减少调用的频率。 一次性批处理的数量可以基于API B的处理能力和响应时间来决定，同时还需要考虑API A的请求特性。 统计可以通过日志记录或者使用度量工具实时监控每个批次的大小和处理效率。&#xA;Microservice Architecture: 将API A分解为多个微服务，每个服务独立调用API B，并且每个服务都有自己的流量限制控制。 Asynchronous Processing: 通过队列和后台工作进程来异步处理对API B的调用。API A可以将请求放入队列中，并由后台服务以控制的速度处理这些请求。 这个具体会用到什么服务 可以用到什么平台呢？ 异步处理可以利用如RabbitMQ、Kafka或AWS SQS这样的消息队列服务。 平台选择可以是任何能够提供必要可靠性和可扩展性的云服务平台，如AWS、Azure或Google Cloud。&#xA;Failover Strategy：当达到流量上限时，实施备用策略。例如，如果API B不可用，API A可以返回一个缓存的响应或一个错误代码，提醒用户稍后重试。 Load Balancing：如果可能的话，可以使用多个API B实例，每个实例都有自己的流量限制，然后在它们之间进行负载均衡。 我的实例可以架在哪里呢？有没有形象的例子 实例可以部署在云服务提供商提供的虚拟机或容器服务中，如AWS EC2或EKS。 形象的例子是Netflix的微服务架构，它使用Amazon AWS上的多个服务实例来处理巨大的流量。</description>
    </item>
    <item>
      <title>Hadoop</title>
      <link>https://wangxinyiu.github.io/posts/hadoop/</link>
      <pubDate>Tue, 06 Feb 2024 14:51:57 -0800</pubDate>
      <guid>https://wangxinyiu.github.io/posts/hadoop/</guid>
      <description> Hadoop概述 Hadoop组成 HDFS YARN MapReduce HDFS、YARN、MapReduce三者关系 大数据技术生态体系 Hadoop概述 Hadoop核心组件 Hadoop HDFS（分布式文件存储系统）：解决海量数据存储 Hadoop YARN（集群资源管理和任务调度框架）：解决资源任务调度 Hadoop MapReduce（分布式计算框架）：解决海量数据计算 (广义上Hadoop是指围绕Hadoop的大数据生态圈) Hadoop组成 HDFS NameNode(nn) -&amp;gt; 数据都存储在什么位置: 存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个问价你的块列表和块所在的DataNode等 DataNode(dn) -&amp;gt; 具体存储数据: 在本地文件系统存储文件块数据，以及块数据的校验和 Secondary NameNode(2nn) -&amp;gt; 秘书: 每隔一段时间对NameNode元数据备份 YARN MapReduce MapReduce将计算过程分为俩个阶段：Map 和 Reduce&#xA;Map阶段并行处理输入数据 Reduce阶段对Map结果进行汇总 HDFS、YARN、MapReduce三者关系 大数据技术生态体系 </description>
    </item>
    <item>
      <title>Manual implementation of data structures</title>
      <link>https://wangxinyiu.github.io/posts/implementdatastructure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://wangxinyiu.github.io/posts/implementdatastructure/</guid>
      <description>Implementation of Stack Using Linked List Using Array Implementation of Queue Using Linked List Using Array Implementation of Stack Using Linked List Should we use Linked List or Double-Linked List? class ListNode { int value; ListNode next; // ListNode prev; public ListNode (int value) { this.value = value; } } public class Stack { // push, pop, peek // 必须有一个head private ListNode head; private int size; // constructor -&amp;gt; 最好是把 initialization 写到 constructor 里面。 public Stack () { head = null; size = 0; } // 返回值是boolean 因为 如果超过size 需要返回false // 但是是有 public boolean push (int value) { // I assume the linked list won&amp;#39;t be full.</description>
    </item>
  </channel>
</rss>
